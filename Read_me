1  RestfullApplication_SpringBoot_In_SSL_Mode
2  Swagger
3  Properties
4  Yaml
5  Profiles
6  Logging
7  Spring_Data_JPA
8  RestTemplate_Microservices_Communication
9  RestTemplateBuilder
10 Centralized_logging_with_RestTemplate
11 Spring_Cloud_OpenFeign
12 Netflix_Hystrix_Circuit_Breaker
13 Spring_cloud_config_server_and_config_Client
14 API_Gateway_ZULL
15 Microservices_Registry_Discovery_Eureka_Server_Client_DiscoveryClient
16 Distributed_Tracing_with_Spring_Cloud_Sleuth_and_Zipkin
17 Loadbalancer_Netflix_Ribbon
18 Resilience4j_Circuit_Breaker_and_DashBoard_Prometheus_Grafana_Micrometer








                             --------------------------All Application with respective service details-------------------------------
                             
                             
                             
                             
                             

+ Create microservice RestfullApplication using SpringBoot and Java

	-usermanagementapp

+ Swagger Documentation + Spring Boot 

	-OrderManagementApp

+ Properties in SpringBoot || @Value & @ConfigurationProperties

	-propertiesDemo

+ yaml in spring boot

	-yamlDemo

+ Profiles in Spring Boot 

	-profilesDemo

+ Logging in Spring Boot App

	-usermanagementapp

+ Spring Data JPA

	-springDataDemo
	
+ Spring Data + JPA + Rest API + MySQL 

	-springDataDemo

+ Rest Template( Microservices communication)

	-UserManagementClient

+ RestTemplateBuilder (How to Create instance of RestTemplate using RestTemplateBuilder)

	-RestTemplateBuilderApp
	
+ Rest Service in SSL Mode(HTTPS)

	-usermanagementapp

+ How to add the Interceptor in RestTemplate(How to do centralized logging in microservices? || Centralized logging with RestTemplate)

	-restTemplateBuilderDemo

+ Spring Cloud OpenFeign (How to make call to 3rd party REST service using OpenFeign client for Http 		GET/PUT/POST/DELETE)

	-FeignClientDemo
	
+ Netflix Hystrix Circuit Breaker

	-OrderManagementService
	
	-RegistrationService
	
+ Spring cloud config server and config Client

	-ConfigServer
	
	-Client-Config
	
+ Api Gateway using ZUUL

	-apigateway
	
	-deseases-service
	
	-doctors-service
	
	-patients-service
	
+ Microservices Registry & Discovery(Eureka Server, Eureka Client, Eureka Discovery Client)

	-eurekaDiscoveryServerDemo	(EurekaServer)
	
	-doctorService	(microservices)
	
	-patientService	(microservices)
	
	-doctor-portal (client Discovery)

+ Distributed Tracing with Spring Cloud Sleuth and Zipkin   

	-DOCTORPORTAL
	
	-DOCTORSERVICEAPP
	
	-NOTIFICATIONSERVICEAPP
	
	-PATIENTSERVICEAPP
	
+ Loadbalancer - Netflix Ribbon
	
	- DocServiceSD

	- DocPortalSD

	- DocPortal

	- DocService
	
+ Resilience4j - Circuit Breaker and DashBoard - Prometheus, Grafana, Micrometer

	- registrationServicer4j
	
	- orderManagementAppr4j

	
